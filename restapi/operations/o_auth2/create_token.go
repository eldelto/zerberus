// Code generated by go-swagger; DO NOT EDIT.

package o_auth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateTokenHandlerFunc turns a function with the right signature into a create token handler
type CreateTokenHandlerFunc func(CreateTokenParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateTokenHandlerFunc) Handle(params CreateTokenParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateTokenHandler interface for that can handle valid create token params
type CreateTokenHandler interface {
	Handle(CreateTokenParams, interface{}) middleware.Responder
}

// NewCreateToken creates a new http.Handler for the create token operation
func NewCreateToken(ctx *middleware.Context, handler CreateTokenHandler) *CreateToken {
	return &CreateToken{Context: ctx, Handler: handler}
}

/*CreateToken swagger:route POST /token OAuth2 createToken

Token endpoint

Endpoint to exchange an authorization code for an access token.

*/
type CreateToken struct {
	Context *middleware.Context
	Handler CreateTokenHandler
}

func (o *CreateToken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateTokenParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateTokenOKBody create token o k body
//
// swagger:model CreateTokenOKBody
type CreateTokenOKBody struct {

	// The generated access token.
	// Required: true
	AccessToken *string `json:"access_token"`

	// The lifetime of the token in seconds.
	// Required: true
	ExpiresIn *int64 `json:"expires_in"`

	// The optional refresh token.
	RefreshToken string `json:"refresh_token,omitempty"`

	// The type of the returned token.
	// Required: true
	TokenType *string `json:"token_type"`
}

// Validate validates this create token o k body
func (o *CreateTokenOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpiresIn(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateTokenOKBody) validateAccessToken(formats strfmt.Registry) error {

	if err := validate.Required("createTokenOK"+"."+"access_token", "body", o.AccessToken); err != nil {
		return err
	}

	return nil
}

func (o *CreateTokenOKBody) validateExpiresIn(formats strfmt.Registry) error {

	if err := validate.Required("createTokenOK"+"."+"expires_in", "body", o.ExpiresIn); err != nil {
		return err
	}

	return nil
}

func (o *CreateTokenOKBody) validateTokenType(formats strfmt.Registry) error {

	if err := validate.Required("createTokenOK"+"."+"token_type", "body", o.TokenType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateTokenOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateTokenOKBody) UnmarshalBinary(b []byte) error {
	var res CreateTokenOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
