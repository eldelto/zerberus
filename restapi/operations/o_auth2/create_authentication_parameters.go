// Code generated by go-swagger; DO NOT EDIT.

package o_auth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewCreateAuthenticationParams creates a new CreateAuthenticationParams object
// no default values defined in spec.
func NewCreateAuthenticationParams() CreateAuthenticationParams {

	return CreateAuthenticationParams{}
}

// CreateAuthenticationParams contains all the bound params for the create authentication operation
// typically these are obtained from a http.Request
//
// swagger:parameters create_authentication
type CreateAuthenticationParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Unique identifier of the selected authentication provider.
	  Required: true
	  In: query
	*/
	Provider string
	/*The URI the client will be redirected to after a successful authorization (has to bee the same URI that has been registered with the auth server).
	  Required: true
	  In: query
	*/
	RedirectURI string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewCreateAuthenticationParams() beforehand.
func (o *CreateAuthenticationParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qProvider, qhkProvider, _ := qs.GetOK("provider")
	if err := o.bindProvider(qProvider, qhkProvider, route.Formats); err != nil {
		res = append(res, err)
	}

	qRedirectURI, qhkRedirectURI, _ := qs.GetOK("redirect_uri")
	if err := o.bindRedirectURI(qRedirectURI, qhkRedirectURI, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindProvider binds and validates parameter Provider from query.
func (o *CreateAuthenticationParams) bindProvider(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("provider", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("provider", "query", raw); err != nil {
		return err
	}

	o.Provider = raw

	return nil
}

// bindRedirectURI binds and validates parameter RedirectURI from query.
func (o *CreateAuthenticationParams) bindRedirectURI(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("redirect_uri", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("redirect_uri", "query", raw); err != nil {
		return err
	}

	o.RedirectURI = raw

	return nil
}
