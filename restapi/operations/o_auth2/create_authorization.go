// Code generated by go-swagger; DO NOT EDIT.

package o_auth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateAuthorizationHandlerFunc turns a function with the right signature into a create authorization handler
type CreateAuthorizationHandlerFunc func(CreateAuthorizationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateAuthorizationHandlerFunc) Handle(params CreateAuthorizationParams) middleware.Responder {
	return fn(params)
}

// CreateAuthorizationHandler interface for that can handle valid create authorization params
type CreateAuthorizationHandler interface {
	Handle(CreateAuthorizationParams) middleware.Responder
}

// NewCreateAuthorization creates a new http.Handler for the create authorization operation
func NewCreateAuthorization(ctx *middleware.Context, handler CreateAuthorizationHandler) *CreateAuthorization {
	return &CreateAuthorization{Context: ctx, Handler: handler}
}

/*CreateAuthorization swagger:route POST /authorize OAuth2 createAuthorization

Create authorization endpoint

Authorizes an application on behalf of the user.

*/
type CreateAuthorization struct {
	Context *middleware.Context
	Handler CreateAuthorizationHandler
}

func (o *CreateAuthorization) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateAuthorizationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
