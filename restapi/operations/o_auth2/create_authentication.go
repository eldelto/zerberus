// Code generated by go-swagger; DO NOT EDIT.

package o_auth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateAuthenticationHandlerFunc turns a function with the right signature into a create authentication handler
type CreateAuthenticationHandlerFunc func(CreateAuthenticationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateAuthenticationHandlerFunc) Handle(params CreateAuthenticationParams) middleware.Responder {
	return fn(params)
}

// CreateAuthenticationHandler interface for that can handle valid create authentication params
type CreateAuthenticationHandler interface {
	Handle(CreateAuthenticationParams) middleware.Responder
}

// NewCreateAuthentication creates a new http.Handler for the create authentication operation
func NewCreateAuthentication(ctx *middleware.Context, handler CreateAuthenticationHandler) *CreateAuthentication {
	return &CreateAuthentication{Context: ctx, Handler: handler}
}

/*CreateAuthentication swagger:route POST /authenticate OAuth2 createAuthentication

Initialize an authentication

Authenticates the user via the selected authentication provider.

*/
type CreateAuthentication struct {
	Context *middleware.Context
	Handler CreateAuthenticationHandler
}

func (o *CreateAuthentication) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateAuthenticationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
